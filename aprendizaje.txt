Conceptos aprendidos: 

* Flujo básico de Git:
    - Modified: Se encuentra en Local, es la carpeta de trabajo en la que están todos los archivos que se están editando
        1.- git add . (se agregan los cambios realizados al índice de git)

    - Staged: Es donde se encuentran indexados todos los cambios que se llevaron a cabo en el Local y que son indicados con el comando 'git add .'
        2.- git commit -m "mensaje descriptivo del cambio realizado" (se agregan los cambios de la etapa anterior al HEAD de git en Local)

    - Commited: Es la etapa donde se encuentran los cambios finales que se enviarán al repositorio ya en línea
        3.- git remote add origin "https://github.com/usuario/dirección-web-del-repositorio.com" (agregar el repositorio principal a dónde serán cargados los archivos desde nuestro local)
        4.- git push -u origin master (indicar la rama a la que serán cargados los archivos desde nuestro local)

    - Remote: Es ya el repositorio que se ecuentra en la red y en dónde estarán almacenados nuestros archivos
        5.- git push (si no se cambia de rama basta con ésta instrucción para cargar nuevos cambios)

* Crear una nueva rama y establecerla como principal
    - git branch -M main

* Si ya existe el repositorio:
    - git branch -M main
    - git remote add origin "https://github.com/usuario/repositorio.git"
    - git push -u origin main

* Cambiar de rama (ejempo de master a main, pasando el historial de master a la nueva rama main)
    - git branch -m master main (se crea la rama main y se le pasa el historial de master)
    - git push -u origin main (se indica el nuevo origin de la nueva rama)
    - git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main (cambiar el HEAD actual a la nueva rama main)
    - git push origin --delete master (una vez realiado el cambio de la rama desde el repositorio en GitHub, se uede eliminar la rama master)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Ignorar archivos:
    - Se debe colocar en el archivo .gitignore los archivos y/o carpetas que no se quieran 'trackear' y se puede hacer de varias formas:

        1.- Colocando directamente el nombre del archivo o carpeta:
            archivo.ext
            carpeta
            /archivo_desde_raiz.ext

        2.- Usando expresiones regulares para indicar un conjunto de archivos (por ejemplo) según su extensión:
            *.log

        3.- Indicando excepciones de algún tipo de archivo
            !producción.log

        4.- Ignorar los archivos terminados en .txt dentro de la carpeta doc, pero no en sus subcarpetas:
            doc/*.txt

        5.- Ignorar los archivos terminados en .txt dentro de la carpeta doc y también en sus subcarpetas:
            doc/**/*.txt

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Clonar repositorios:
    - Para clonar un repositorio solo se debe incicar con el siguiente comando:
        git clone https://github.com/omar0369/curso-git-prueba1.git

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Ramas:
    - Crear una rama:
        git branch 'nombre-rama'

    - Cambiar de rama (si ya existe):
        git checkout 'nombre-rama'

    - Crear una rama y cambiarte a ella:
        git checkout -b 'nombre-rama'

    - Eliminar una rama:
        git branch -d 'nombre-rama'

    - Eliminar una rama de forma forzada:
        git branch -D 'nombre-rama'

    - Listar todas las ramas del repositorio:
        git branch

    - Listar ramas no fusionadas a la rama actual:
        git branch --no-merged

    - Listar ramas fusionadas a la rama actual:
        git branch --merged

    - Rebasar ramas: (significa mandar una rama, por ejemplo, que no se ha trabajado hace ya algún tiempo, a la cabecera de git por encima de la principal) (casi no se utiliza)
        git checkout rama-secundaria
        git rebase rama-principal

    
    1.- Fusión de ramas
        